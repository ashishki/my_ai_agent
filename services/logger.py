from loguru import logger
import os
from sqlalchemy.ext.asyncio import AsyncSession
from models.db_models import LogEntry, ErrorLog
import json
import traceback

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
LOGS_DIR = "logs"
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logger.add(f"{LOGS_DIR}/app.log", rotation="10 MB", retention="7 days", level="INFO")

def log_request(endpoint: str, data: dict, model: str, response: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."""
    logger.info(
        f"üìå –ó–∞–ø—Ä–æ—Å -> {endpoint}\n"
        f"üí° –î–∞–Ω–Ω—ã–µ: {data}\n"
        f"üß† –ú–æ–¥–µ–ª—å: {model}\n"
        f"üì• –û—Ç–≤–µ—Ç: {response[:300]}..."  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    )


async def save_log_to_db(
    db: AsyncSession,
    endpoint: str,
    request_id: str,
    data: dict,
    model: str,
    response: str,
    duration: float,
    status: str = 'success'
) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î."""
    log_entry = LogEntry(
        request_id=request_id,
        endpoint=endpoint,
        data=str(data),
        model=model,
        response=response,
        duration=duration,
        status=status
    )
    db.add(log_entry)
    await db.commit()

async def save_error_log(
    db: AsyncSession,
    request_id: str,
    endpoint: str,
    error: str,
    data: dict,
    stack_trace: str = None
) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ –ë–î."""
    error_log = ErrorLog(
        request_id=request_id,
        endpoint=endpoint,
        error=error,
        data=str(data),
        stack_trace=stack_trace
    )
    db.add(error_log)
    await db.commit()